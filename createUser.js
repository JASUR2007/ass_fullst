const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('./models/User'); // –ü—É—Ç—å –∫ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏
const sequelize = require('./config/database'); // –ü—É—Ç—å –∫ —Ç–≤–æ–µ–π –ë–î
require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT_SECRET –∏–∑ .env

async function createTestUser() {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ DB connected');

        const email = 'john0@example.com';
        const plainPassword = '1234';

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await User.findOne({ where: { email } });
        if (existingUser) {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(plainPassword, 10);

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = await User.create({
            name: 'Ivan Test',
            email,
            phone_number: '1234567890',
            password: hashedPassword,
            role: 'admin',
            account: 'client'
        });

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.email);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            {
                userId: newUser.id,
                email: newUser.email
            },
            process.env.JWT_SECRET || 'some_super_secret_key_123456', // fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è .env
            { expiresIn: '1h' }
        );

        console.log('üîë JWT —Ç–æ–∫–µ–Ω:');
        console.log(token);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
        await sequelize.close();
    }
}

createTestUser();
